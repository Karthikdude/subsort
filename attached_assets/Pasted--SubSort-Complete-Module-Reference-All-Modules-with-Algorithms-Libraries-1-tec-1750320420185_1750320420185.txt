# SubSort - Complete Module Reference

## ðŸ“‹ All Modules with Algorithms & Libraries

### 1. **--techstack** (Technology Stack Detection)
**Purpose**: Detect and sort subdomains based on their technology stack
```
Libraries:
- python-wappalyzer >= 0.3.1
- whatweb-python >= 1.0.0
- beautifulsoup4 >= 4.12.0
- requests >= 2.31.0
- lxml >= 4.9.0

Algorithm:
1. Multi-layer fingerprinting approach
2. HTTP header analysis (Server, X-Powered-By, X-AspNet-Version)
3. HTML meta tag parsing
4. JavaScript library version detection via regex patterns
5. CSS framework identification
6. Cookie name pattern matching
7. Response header correlation scoring

Output: tech_stack_[timestamp].txt
```

### 2. **--vhost** (Virtual Host Detection)
**Purpose**: Perform virtual host-based detection and save accordingly
```
Libraries:
- aiohttp >= 3.8.0
- aiodns >= 3.0.0
- dnspython >= 2.3.0
- ipaddress (built-in)

Algorithm:
1. Host header manipulation testing
2. IP resolution comparison
3. SSL certificate SAN field analysis
4. Response content differential analysis
5. HTTP status code pattern matching
6. Content-length variance detection

Output: vhost_detection_[timestamp].txt
```

### 3. **--title** (Page Title Extraction)
**Purpose**: Fetch <title> tags to identify panels or services
```
Libraries:
- beautifulsoup4 >= 4.12.0
- aiohttp >= 3.8.0
- html5lib >= 1.1
- chardet >= 5.1.0

Algorithm:
1. HTML parsing with encoding detection
2. Title tag extraction with fallback methods
3. Unicode normalization and cleaning
4. Keyword-based service identification
5. Pattern matching for admin panels

Output: page_titles_[timestamp].txt
```

### 4. **--responsetime** (Response Time Analysis)
**Purpose**: Measure response times and sort by latency
```
Libraries:
- aiohttp >= 3.8.0
- asyncio (built-in)
- statistics (built-in)
- numpy >= 1.24.0

Algorithm:
1. TCP connection timing measurement
2. DNS resolution time isolation
3. TLS handshake duration tracking
4. HTTP response time calculation
5. Statistical analysis (mean, median, percentiles)
6. Latency-based clustering

Output: response_times_[timestamp].txt
```

### 5. **--faviconhash** (Favicon Hash Generation)
**Purpose**: Generate favicon hashes for Shodan-style reconnaissance
```
Libraries:
- hashlib (built-in)
- mmh3 >= 3.1.0 (MurmurHash3)
- PIL >= 9.5.0 (Pillow)
- imagehash >= 4.3.1
- base64 (built-in)

Algorithm:
1. Favicon URL discovery (multiple methods)
2. Image download and validation
3. Multiple hash generation:
   - MD5, SHA1, SHA256 (cryptographic)
   - MurmurHash3 (Shodan-compatible)
   - Perceptual hashing (pHash, dHash)
4. Base64 encoding for Shodan queries

Output: favicon_hashes_[timestamp].txt
```

### 6. **--robots** (Robots.txt & Sitemap Analysis)
**Purpose**: Fetch and parse robots.txt and sitemap.xml for hidden endpoints
```
Libraries:
- urllib.robotparser (built-in)
- xml.etree.ElementTree (built-in)
- aiohttp >= 3.8.0
- beautifulsoup4 >= 4.12.0

Algorithm:
1. Robots.txt parsing and validation
2. Disallow directive extraction
3. Sitemap URL discovery
4. XML sitemap recursive parsing
5. URL pattern analysis
6. Hidden endpoint categorization

Output: robots_analysis_[timestamp].txt
```

### 7. **--js** (JavaScript File Extraction)
**Purpose**: Extract and download linked JavaScript files
```
Libraries:
- beautifulsoup4 >= 4.12.0
- aiofiles >= 22.1.0
- aiohttp >= 3.8.0
- urllib.parse (built-in)
- mimetypes (built-in)

Algorithm:
1. HTML parsing for script tag extraction
2. Inline vs external JS identification
3. Dynamic JS loading detection
4. Source map discovery
5. Minified code detection
6. File integrity verification

Output: js_files_[timestamp].txt + downloaded files
```

### 8. **--auth** (Authentication Detection)
**Purpose**: Detect login portals or authentication-requiring endpoints
```
Libraries:
- beautifulsoup4 >= 4.12.0
- aiohttp >= 3.8.0
- re (built-in)
- selenium >= 4.8.0 (optional)

Algorithm:
1. Form-based authentication detection
2. HTTP Basic/Digest auth identification
3. OAuth/SAML flow recognition
4. JWT token presence checking
5. Session cookie analysis
6. Login form field identification

Output: auth_detection_[timestamp].txt
```

### 9. **--server** (Server Header Analysis)
**Purpose**: Extract Server headers and group subdomains
```
Libraries:
- aiohttp >= 3.8.0
- collections (built-in)
- re (built-in)

Algorithm:
1. HTTP header extraction
2. Server string parsing and normalization
3. Version information extraction
4. Load balancer detection
5. Reverse proxy identification
6. Statistical distribution analysis

Output: server_headers_[timestamp].txt
```

### 10. **--status** (HTTP Status Code Analysis)
**Purpose**: Fetch and sort subdomains by HTTP status codes
```
Libraries:
- aiohttp >= 3.8.0
- http (built-in)
- collections (built-in)

Algorithm:
1. HTTP status code collection
2. Redirect chain following
3. Status code categorization (2xx, 3xx, 4xx, 5xx)
4. Error pattern identification
5. Custom status code handling
6. Response clustering by status

Output: status_codes_[timestamp].txt
```

### 11. **--jsvuln** (JavaScript Vulnerability Detection)
**Purpose**: Identify outdated/vulnerable JavaScript libraries
```
Libraries:
- retire >= 3.0.0
- requests >= 2.31.0
- re (built-in)
- json (built-in)
- packaging >= 23.0

Algorithm:
1. JavaScript library identification
2. Version extraction via multiple methods
3. CVE database correlation
4. CVSS score calculation
5. Dependency chain analysis
6. Exploit availability checking

Output: js_vulnerabilities_[timestamp].txt
```

### 12. **--loginpanels** (Login Panel Detection)
**Purpose**: Detect and list login portals and authentication forms
```
Libraries:
- beautifulsoup4 >= 4.12.0
- aiohttp >= 3.8.0
- selenium >= 4.8.0
- re (built-in)

Algorithm:
1. Form element analysis
2. Input field type identification
3. Submit button detection
4. CAPTCHA presence checking
5. Multi-factor authentication detection
6. Admin panel pattern matching

Output: login_panels_[timestamp].txt
```

### 13. **--jwt** (JWT Token Analysis)
**Purpose**: Extract and decode JWT tokens for security analysis
```
Libraries:
- PyJWT >= 2.6.0
- cryptography >= 40.0.0
- base64 (built-in)
- json (built-in)
- re (built-in)

Algorithm:
1. JWT token extraction from headers/responses
2. Token structure validation
3. Header and payload decoding
4. Signature algorithm identification
5. Expiration time analysis
6. Insecure configuration detection

Output: jwt_analysis_[timestamp].txt
```

### 14. **--cname** (CNAME Takeover Detection)
**Purpose**: Check CNAME records for possible subdomain takeover
```
Libraries:
- aiodns >= 3.0.0
- dnspython >= 2.3.0
- aiohttp >= 3.8.0
- json (built-in)

Algorithm:
1. DNS CNAME record resolution
2. Chain following and validation
3. Service availability verification
4. Known takeover service detection
5. NXDOMAIN response analysis
6. Subdomain claim possibility assessment

Output: cname_takeover_[timestamp].txt
```

### 15. **--iphistory** (IP History Tracking)
**Purpose**: Check historical IP records to track infrastructure changes
```
Libraries:
- requests >= 2.31.0
- dnspython >= 2.3.0
- json (built-in)
- datetime (built-in)

Algorithm:
1. DNS history API integration
2. IP change timeline construction
3. Infrastructure migration detection
4. Hosting provider identification
5. Geographic location tracking
6. Historical data correlation

Output: ip_history_[timestamp].txt
```

### 16. **--httpmethods** (HTTP Methods Discovery)
**Purpose**: Discover supported HTTP methods for misconfiguration detection
```
Libraries:
- aiohttp >= 3.8.0
- asyncio (built-in)

Algorithm:
1. OPTIONS request method enumeration
2. Method availability testing
3. Response header analysis
4. CORS preflight handling
5. WebDAV method detection
6. Dangerous method identification

Output: http_methods_[timestamp].txt
```

### 17. **--port** (Port Scanning)
**Purpose**: Perform port scanning and group by open ports
```
Libraries:
- python-nmap >= 0.7.1
- asyncio (built-in)
- socket (built-in)
- concurrent.futures (built-in)

Algorithm:
1. TCP SYN scanning
2. Service detection and banner grabbing
3. OS fingerprinting
4. Port state classification
5. Service version identification
6. Vulnerability correlation

Output: port_scan_[timestamp].txt
```

### 18. **--ssl** (SSL Certificate Analysis)
**Purpose**: Collect SSL certificate details and analyze security
```
Libraries:
- sslyze >= 5.1.0
- cryptography >= 40.0.0
- OpenSSL >= 22.0.0
- certifi >= 2022.12.7

Algorithm:
1. Certificate chain validation
2. Expiration date analysis
3. Subject Alternative Names extraction
4. Cipher suite enumeration
5. Protocol version testing
6. Certificate transparency log checking

Output: ssl_analysis_[timestamp].txt
```

### 19. **--headers** (Security Headers Analysis)
**Purpose**: Analyze and store security-related headers
```
Libraries:
- aiohttp >= 3.8.0
- collections (built-in)
- re (built-in)

Algorithm:
1. Security header extraction
2. Header value validation
3. Policy parsing (CSP, HSTS, etc.)
4. Missing header identification
5. Misconfiguration detection
6. Security score calculation

Output: security_headers_[timestamp].txt
```

### 20. **--content** (Content-Type Analysis)
**Purpose**: Sort based on Content-Type headers
```
Libraries:
- aiohttp >= 3.8.0
- mimetypes (built-in)
- collections (built-in)

Algorithm:
1. Content-Type header extraction
2. MIME type categorization
3. Charset identification
4. Binary content detection
5. API endpoint classification
6. File type distribution analysis

Output: content_types_[timestamp].txt
```

### 21. **--cors** (CORS Configuration Analysis)
**Purpose**: Detect CORS configuration issues or wildcards
```
Libraries:
- aiohttp >= 3.8.0
- re (built-in)

Algorithm:
1. CORS header enumeration
2. Origin validation testing
3. Wildcard detection
4. Credential handling analysis
5. Preflight request testing
6. Security vulnerability identification

Output: cors_analysis_[timestamp].txt
```

### 22. **--cdn** (CDN/Hosting Provider Detection)
**Purpose**: Identify and group based on CDN or hosting provider
```
Libraries:
- aiohttp >= 3.8.0
- dnspython >= 2.3.0
- geoip2 >= 4.6.0
- re (built-in)

Algorithm:
1. HTTP header analysis
2. DNS CNAME resolution
3. IP address geolocation
4. ASN (Autonomous System Number) lookup
5. Edge server identification
6. CDN fingerprint matching

Output: cdn_detection_[timestamp].txt
```

### 23. **--length** (Content Length Analysis)
**Purpose**: Sort subdomains based on Content-Length or response similarity
```
Libraries:
- aiohttp >= 3.8.0
- hashlib (built-in)
- difflib (built-in)
- sklearn >= 1.2.0 (for clustering)

Algorithm:
1. Content-Length header extraction
2. Response body size calculation
3. Simhash algorithm for similarity detection
4. Clustering by content similarity
5. Duplicate content identification
6. Size-based anomaly detection

Output: content_length_[timestamp].txt
```

### 24. **--geoip** (Geographic IP Analysis)
**Purpose**: Sort based on country, ASN, or IP origin
```
Libraries:
- geoip2 >= 4.6.0
- maxminddb >= 2.2.0
- requests >= 2.31.0
- ipaddress (built-in)

Algorithm:
1. IP address resolution
2. Geolocation database lookup
3. Country and city identification
4. ISP and organization detection
5. ASN analysis
6. Geographic clustering

Output: geoip_analysis_[timestamp].txt
```

### 25. **--cms** (Content Management System Detection)
**Purpose**: Detect CMS and organize results
```
Libraries:
- python-wappalyzer >= 0.3.1
- beautifulsoup4 >= 4.12.0
- requests >= 2.31.0
- re (built-in)

Algorithm:
1. CMS fingerprint matching
2. Version detection via multiple methods
3. Plugin/theme identification
4. Admin panel discovery
5. Update status checking
6. Vulnerability correlation

Output: cms_detection_[timestamp].txt
```

### 26. **--waf** (Web Application Firewall Detection)
**Purpose**: Detect WAF and categorize accordingly
```
Libraries:
- aiohttp >= 3.8.0
- re (built-in)
- wafw00f >= 2.2.0

Algorithm:
1. HTTP response analysis
2. Error page fingerprinting
3. Rate limiting detection
4. Blocked request pattern testing
5. WAF vendor identification
6. Bypass technique testing

Output: waf_detection_[timestamp].txt
```

### 27. **--cloudassets** (Cloud Asset Discovery)
**Purpose**: Discover exposed S3 buckets, Azure blobs, or Google Cloud storage
```
Libraries:
- boto3 >= 1.26.0
- azure-storage-blob >= 12.14.0
- google-cloud-storage >= 2.7.0
- re (built-in)

Algorithm:
1. URL pattern extraction from content
2. Cloud storage URL identification
3. Public access permission testing
4. Bucket/container enumeration
5. Object listing and analysis
6. Sensitive file pattern matching

Output: cloud_assets_[timestamp].txt
```

### 28. **--dirscan** (Directory Discovery)
**Purpose**: Discover common endpoints/directories
```
Libraries:
- aiohttp >= 3.8.0
- aiofiles >= 22.1.0
- collections (built-in)

Algorithm:
1. Wordlist-based directory bruteforcing
2. Response code analysis
3. Content-length differential detection
4. Recursive directory scanning
5. File extension enumeration
6. Custom 404 page detection

Wordlists: SecLists, DirBuster, custom technology-specific lists
Output: directories_[timestamp].txt
```

### 29. **--wappalyzer** (Technology Identification)
**Purpose**: Use Wappalyzer to identify frontend/backend technologies
```
Libraries:
- python-wappalyzer >= 0.3.1
- requests >= 2.31.0
- json (built-in)

Algorithm:
1. Technology fingerprint database loading
2. Multi-pattern matching (headers, HTML, JS, cookies)
3. Confidence scoring
4. Category-based classification
5. Version extraction
6. Technology stack correlation

Output: wappalyzer_results_[timestamp].txt
```

### 30. **--vulnscan** (Vulnerability Scanning)
**Purpose**: Run vulnerability fingerprints using custom signatures
```
Libraries:
- nuclei-python >= 2.8.0
- requests >= 2.31.0
- yaml >= 6.0
- concurrent.futures (built-in)

Algorithm:
1. Nuclei template loading
2. HTTP request generation based on templates
3. Response pattern matching
4. Vulnerability verification
5. False positive reduction
6. Severity-based result prioritization

Templates: Nuclei community templates, custom signatures
Output: vulnerabilities_[timestamp].txt
```

## ðŸ“Š Performance Summary

- **Total Modules**: 30
- **Async Libraries**: 15+ (aiohttp, aiodns, aiofiles, etc.)
- **Specialized Libraries**: 25+ (sslyze, nuclei, wappalyzer, etc.)
- **Built-in Libraries**: 20+ (asyncio, hashlib, re, etc.)
- **Machine Learning**: sklearn for clustering and similarity analysis
- **Security Focused**: 12 modules specifically for security analysis

## ðŸŽ¯ Module Categories

1. **Infrastructure Analysis**: --port, --ssl, --server, --geoip, --iphistory
2. **Technology Detection**: --techstack, --cms, --wappalyzer, --faviconhash
3. **Security Analysis**: --vulnscan, --jsvuln, --auth, --headers, --cors, --waf
4. **Content Analysis**: --title, --content, --length, --robots, --js
5. **Network Analysis**: --vhost, --cname, --httpmethods, --cdn
6. **Cloud Security**: --cloudassets, --jwt
7. **Discovery**: --dirscan, --loginpanels
8. **Performance**: --responsetime, --status

Each module is designed to work independently or in combination with others, providing comprehensive subdomain reconnaissance capabilities.